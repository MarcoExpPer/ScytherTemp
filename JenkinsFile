import groovy.json.JsonSlurper

def N_COMMITS = 0
def ERROR_MSG = "";

def ATEST_RESULT_STRING = new StringBuffer();
def ALL_AT_PASSED = true;



pipeline {
    agent {
		node {
			label 'master'
			customWorkspace "C:\\JenkinsWorkspaces\\${PROJECT_NAME}"
    }}
	stages {
		stage('Check changes') { 
			steps {
				script{
					N_COMMITS = currentBuild.changeSets.size(); 
					echo "Amount of commits -> ${N_COMMITS}"
					echo "${WORKSPACE}"
					
					if(params.FORCE_BUILD == true){
						N_COMMITS = 1;
						echo "Forcing build"
					}
				}
			}
			post{
				failure {
					script{
						errorMsg = "Check changes";
					}
				}
			}
		}
		stage('Build and compile'){
			steps{
				script{
					if(N_COMMITS > 0){

						echo "Building and compiling"
						//*
						build job: 'Discord-Notify', parameters: [
							string(name: 'TITLE', value: "${PROJECT_NAME}"),
							string(name: 'MESSAGE', value: "Building and Compiling"),
							string(name: "RESULT", value: "UNSTABLE"),
							string(name: "DISCORD_HOOK", value: env.DISCORD_HOOK)
						]

						
						bat "\"${UE_PATH}\\Engine\\Binaries\\DotNET\\UnrealBuildTool.exe\" -projectfiles -project=\"${WORKSPACE}\\${PROJECT_NAME}.uproject\" -game -rocket -progress"
						bat "\"${UE_PATH}/Engine/Binaries/DotNET/UnrealBuildTool.exe\" ${PROJECT_NAME} development Win64 -project=\"${WORKSPACE}\\${PROJECT_NAME}.uproject\" -rocket -editorrecompile -progress -noubtmakefiles -NoHotReloadFromIDE -2019"
						
						bat "if not exist \"${WORKSPACE}/Builds/\" mkdir \"${WORKSPACE}/Builds\""
							
						bat "\"${UE_PATH}\\Engine\\Build\\BatchFiles\\RunUAT.bat\" BuildCookRun -project=\"${WORKSPACE}\\${PROJECT_NAME}.uproject\" -noP4 -platform=Win64 -clientconfig=Development -cook -allmaps -build -stage %USE_PAK% -archive -archivedirectory=\"${WORKSPACE}/Builds\""
						/**/
					}
				}
			}
			post{
				failure {
					script{
						errorMsg = "Building and compiling failed";
					}
				}
			}
		}
		stage('Automatic testing'){
			steps{
				script{
					if(N_COMMITS > 0){
						echo "Doing tests"

						//*
						build job: 'Discord-Notify', parameters: [
							string(name: 'TITLE', value: "${PROJECT_NAME}"),
							string(name: 'MESSAGE', value: "Doing Tests"),
							string(name: "RESULT", value: "UNSTABLE"),
							string(name: "DISCORD_HOOK", value: env.DISCORD_HOOK)
						]

						try{
							bat "\"${UE_PATH}Engine\\Binaries\\Win64\\UE4Editor-Cmd.exe\" ${WORKSPACE}\\${PROJECT_NAME}.uproject -nosplash -unattended -nocontentbrowser -nosound -nopause ${SHOW_EDITOR == true ? "" : "-nullrhi"} -ExecCmds=\"Automation RunTests Project\" -testexit=\"Automation Test Queue Empty\" -log -log=RunTests.log -ReportOutputPath=\"${WORKSPACE}\\Saved\\AutomationTestResults\"" 
						}catch( Exception e){
							echo "Error while doing automatic testing UnitTest -> ${e.getMessage()}"
						}
						/**/
					}
				}
			}
			post{
				failure {
					script{
						errorMsg = "Doing tests failed";
					}
				}
			}
		}
		stage('Parse results'){
			steps{
				script{
					if(N_COMMITS > 0){
						echo "Parse results"	
						ALL_AT_PASSED = true;

						JsonSlurper jsonSlurper = new JsonSlurper()	
						Map parsedJson = jsonSlurper.parse(new File("${WORKSPACE}\\Saved\\AutomationTestResults\\index.json"))

						for(def test : parsedJson.tests) {
							if(test.state == "Success"){
								ATEST_RESULT_STRING.append(":white_check_mark: ${test.testDisplayName} -> ${test.state} \n")
							}else{
								ALL_AT_PASSED = false;

								ATEST_RESULT_STRING.append(":X: ${test.testDisplayName} -> ${test.state} \n")
								
							}
    					}
					}
				}
			}
			post{
				failure {
					script{
						errorMsg = "Parse results failed";
						}
					}
			}
		}

	}
	post{
		success{
			script{
				if(N_COMMITS > 0){
					echo "SUCCESS"

					if(ALL_AT_PASSED){

						build job: 'Discord-Notify', parameters: [
							string(name: 'TITLE', value: "${PROJECT_NAME} SUCCESS"),
							string(name: 'MESSAGE', value: "\n ${ATEST_RESULT_STRING}"),
							string(name: "RESULT", value: "SUCCESS"),
							string(name: "DISCORD_HOOK", value: env.DISCORD_HOOK)
						]

					}else{
						echo "AT TEST FAILURE"

						build job: 'Discord-Notify', parameters: [
							string(name: 'TITLE', value: "${PROJECT_NAME} AT TEST FAILURE"),
							string(name: 'MESSAGE', value: "\n ${ATEST_RESULT_STRING}"),
							string(name: "RESULT", value: "FAILURE"),
							string(name: "DISCORD_HOOK", value: env.DISCORD_HOOK)
						]
					}

				}else{
					echo "No changes"
				}
			}
		}
		failure {
			script{
				if(N_COMMITS > 0){
					echo "FAILURE"

					build job: 'Discord-Notify', parameters: [
						string(name: 'TITLE', value: "${PROJECT_NAME} ERROR"),
						string(name: 'MESSAGE', value: "\n ${errorMsg}"),
						string(name: "RESULT", value: "FAILURE"),
						string(name: "DISCORD_HOOK", value: env.DISCORD_HOOK)
					]

				}else{
					echo "FAILURE IN THE JENKINS PIPELINE"
					
					build job: 'Discord-Notify', parameters: [
						string(name: 'TITLE', value: "${PROJECT_NAME} ERROR"),
						string(name: 'MESSAGE', value: "${errorMsg} \n - FAILURE IN THE JENKINS PIPELINE"),
						string(name: "RESULT", value: "FAILURE"),
						string(name: "DISCORD_HOOK", value: env.DISCORD_HOOK)
					]
				}
			}
		}
	}
}
